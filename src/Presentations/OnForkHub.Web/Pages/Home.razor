@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="container-fluid p-3">
    <div class="video-section">
        <button class="nav-button prev-button" @onclick="PreviousVideo" aria-label="Previous video">
            <i class="oi oi-chevron-left"></i>
        </button>

        <div class="main-video-container">
            <div class="outer-container">
                <div class="inner-container">
                    @if (nowPlayingVideo?.Title != null)
                    {
                        <div class="video-info">
                            <div class="video-overlay rounded">
                                <i class="oi oi-video me-2"></i>
                                Now Playing: @nowPlayingVideo.Title
                            </div>
                            <div class="video-controls">
                                <button class="control-btn" title="Like">
                                    <i class="oi oi-heart"></i>
                                </button>
                                <button class="control-btn" title="Share">
                                    <i class="oi oi-share"></i>
                                </button>
                                <button class="control-btn" title="Add to Playlist">
                                    <i class="oi oi-plus"></i>
                                </button>
                            </div>
                        </div>
                    }
                    <video @ref="videoPlayer" controls id="videoPlayer" poster="/images/videoPoster.png">
                    </video>
                </div>
            </div>
        </div>

        <button class="nav-button next-button" @onclick="NextVideo" aria-label="Next video">
            <i class="oi oi-chevron-right"></i>
        </button>
    </div>

    <div class="playlist-section">
        <div id="scrollbar" class="video-list">
            @foreach (var video in videos)
            {
                <VideoCard @key="video.Name"
                           Video="video"
                           OnPlayCallBack="async () => await PlayVideo(video)"
                           NowPlayingVideo="@nowPlayingVideo?.Title" />
            }
        </div>
    </div>
</div>


@code {
    private List<Video> videos = new();
    private Video? nowPlayingVideo;
    private ElementReference videoPlayer;
    private IJSObjectReference? module;
    private int currentIndex = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Home.razor.js");
            if (nowPlayingVideo is not null)
            {
                await PlayVideo(nowPlayingVideo);
            }
        }
    }

    protected override void OnInitialized()
    {
        GetMovies();
        nowPlayingVideo = videos.FirstOrDefault();
    }

    private async Task NextVideo()
    {
        currentIndex = (currentIndex + 1) % videos.Count;
        nowPlayingVideo = videos[currentIndex];
        await PlayVideo(nowPlayingVideo);
    }

    private async Task PreviousVideo()
    {
        currentIndex = (currentIndex - 1 + videos.Count) % videos.Count;
        nowPlayingVideo = videos[currentIndex];
        await PlayVideo(nowPlayingVideo);
    }

    private async Task PlayVideo(Video video)
    {
        if (module is not null)
        {
            nowPlayingVideo = video;
            await module.InvokeVoidAsync("playVideo", video.Name, videoPlayer);
            StateHasChanged();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    private void GetMovies()
    {
        videos.Add(new Video() { Title = "Skate Bros", Thumbnail = "SkateBros.png", Name = "SkateBros.mp4" });
        videos.Add(new Video() { Title = "Before the Storm", Thumbnail = "CalmingWaves.png", Name = "CalmingWaves.mp4" });
        videos.Add(new Video() { Title = "Mustang Sally", Thumbnail = "MustangSally.png", Name = "MustangSally.mp4" });
        videos.Add(new Video() { Title = "The Sixth Element", Thumbnail = "TheSixthElement.png", Name = "TheSixthElement.mp4" });
        videos.Add(new Video() { Title = "Cyber City 2045", Thumbnail = "Cyber2045.png", Name = "Cyber2045.mp4" });
        videos.Add(new Video() { Title = "Zero Hour", Thumbnail = "DestinyZeroHour.png", Name = "DestinyZeroHour.mp4" });
    }
}

